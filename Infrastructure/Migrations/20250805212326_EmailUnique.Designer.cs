// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ScheduleAppContext))]
    [Migration("20250805212326_EmailUnique")]
    partial class EmailUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProyectoFinal.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftId");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("ACTIVE");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("Appointment_Id_PK");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.EnabledDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("Id")
                        .HasName("EnabledDate_Id_PK");

                    b.ToTable("EnabledDates");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("EndTime");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("StartTime");

                    b.HasKey("Id")
                        .HasName("Schedule_Id_PK");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<byte>("MeetingDurationOnMinutes")
                        .HasColumnType("tinyint")
                        .HasColumnName("MeetingDurationOnMinutes");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<short>("ServicesSlots")
                        .HasColumnType("smallint")
                        .HasColumnName("ServicesSlots");

                    b.HasKey("Id")
                        .HasName("Shift_Id_PK");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("ProyectoFinal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("User_Id_PK");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Appointment", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Shift", "Shift")
                        .WithMany("Appointments")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Appointment_ShiftId_FK");

                    b.HasOne("ProyectoFinal.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Appointment_UserId_FK");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Shift", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Schedule", "Schedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Shift_ScheduleId_FK");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Schedule", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Shift", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
